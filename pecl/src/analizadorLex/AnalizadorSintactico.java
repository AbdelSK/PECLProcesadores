
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 11 22:29:01 CET 2016
//----------------------------------------------------

package analizadorLex;

import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 11 22:29:01 CET 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\007\000\002\003" +
    "\010\000\002\003\002\000\002\005\005\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\004\005\000" +
    "\002\007\005\000\002\007\003\000\002\007\002\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\023\003\000\002\023\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\006\000\002\025\006\000\002\025\003\000\002\025" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\012" +
    "\005\000\002\012\005\000\002\013\003\000\002\013\004" +
    "\000\002\014\006\000\002\017\004\000\002\020\006\000" +
    "\002\015\003\000\002\015\003\000\002\021\004\000\002" +
    "\021\004\000\002\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\004\005\001\002\000\004\002\137\001" +
    "\002\000\004\051\006\001\002\000\004\005\007\001\002" +
    "\000\006\006\ufffe\010\011\001\002\000\004\006\024\001" +
    "\002\000\004\051\013\001\002\000\004\047\016\001\002" +
    "\000\006\045\014\047\ufffc\001\002\000\004\051\013\001" +
    "\002\000\004\047\ufffd\001\002\000\006\011\020\012\021" +
    "\001\002\000\004\046\022\001\002\000\004\046\ufffb\001" +
    "\002\000\004\046\ufffa\001\002\000\006\006\ufffe\010\011" +
    "\001\002\000\004\006\uffff\001\002\000\020\007\ufff6\013" +
    "\026\014\037\015\041\016\027\020\036\051\031\001\002" +
    "\000\004\002\000\001\002\000\016\025\055\026\057\027" +
    "\061\043\060\050\054\051\136\001\002\000\016\025\055" +
    "\026\057\027\061\043\060\050\054\051\117\001\002\000" +
    "\010\007\ufff3\022\ufff3\046\ufff3\001\002\000\004\030\130" +
    "\001\002\000\004\007\127\001\002\000\010\007\ufff7\022" +
    "\ufff7\046\125\001\002\000\004\007\123\001\002\000\010" +
    "\007\ufff4\022\ufff4\046\ufff4\001\002\000\016\025\055\026" +
    "\057\027\061\043\060\050\054\051\117\001\002\000\016" +
    "\025\055\026\057\027\061\043\060\050\054\051\053\001" +
    "\002\000\010\007\ufff5\022\ufff5\046\ufff5\001\002\000\010" +
    "\007\ufff2\022\ufff2\046\ufff2\001\002\000\004\007\047\001" +
    "\002\000\006\007\uffd6\022\044\001\002\000\020\007\ufff6" +
    "\013\026\014\037\015\041\016\027\020\036\051\031\001" +
    "\002\000\004\007\uffd5\001\002\000\004\007\uffd3\001\002" +
    "\000\004\016\050\001\002\000\010\007\uffd7\022\uffd7\046" +
    "\uffd7\001\002\000\046\007\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\107\040\106\041\105\042\110\044\ufff0" +
    "\046\ufff0\001\002\000\036\007\uffef\017\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\044\uffef\046\uffef\001\002\000\046\007" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\044\uffec\046\uffec\001\002\000\046" +
    "\007\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\044\uffeb\046\uffeb\001\002\000" +
    "\036\007\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\044" +
    "\uffe6\046\uffe6\001\002\000\030\007\uffcd\022\uffcd\023\066" +
    "\024\075\031\076\032\070\033\073\034\072\035\071\036" +
    "\074\046\uffcd\001\002\000\036\007\uffe5\017\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\044\uffe5\046\uffe5\001\002\000\016" +
    "\025\055\026\057\027\061\043\060\050\054\051\053\001" +
    "\002\000\004\043\062\001\002\000\016\025\055\026\057" +
    "\027\061\043\060\050\054\051\064\001\002\000\024\023" +
    "\uffef\024\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\044\101\001\002\000\034\023\uffec\024\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\044\100\001\002\000\022\023" +
    "\066\024\075\031\076\032\070\033\073\034\072\035\071" +
    "\036\074\001\002\000\016\025\uffda\026\uffda\027\uffda\043" +
    "\uffda\050\uffda\051\uffda\001\002\000\016\025\055\026\057" +
    "\027\061\043\060\050\054\051\053\001\002\000\016\025" +
    "\uffdf\026\uffdf\027\uffdf\043\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\016\025\uffdd\026\uffdd\027\uffdd\043\uffdd\050\uffdd\051" +
    "\uffdd\001\002\000\016\025\uffe0\026\uffe0\027\uffe0\043\uffe0" +
    "\050\uffe0\051\uffe0\001\002\000\016\025\uffde\026\uffde\027" +
    "\uffde\043\uffde\050\uffde\051\uffde\001\002\000\016\025\uffdb" +
    "\026\uffdb\027\uffdb\043\uffdb\050\uffdb\051\uffdb\001\002\000" +
    "\016\025\uffd9\026\uffd9\027\uffd9\043\uffd9\050\uffd9\051\uffd9" +
    "\001\002\000\016\025\uffdc\026\uffdc\027\uffdc\043\uffdc\050" +
    "\uffdc\051\uffdc\001\002\000\036\007\uffea\017\uffea\021\uffea" +
    "\022\uffea\023\066\024\075\031\076\032\070\033\073\034" +
    "\072\035\071\036\074\044\uffea\046\uffea\001\002\000\036" +
    "\007\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\044\uffe7" +
    "\046\uffe7\001\002\000\036\007\uffe8\017\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\044\uffe8\046\uffe8\001\002\000\034\023" +
    "\ufff0\024\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\107\040\106\041\105\042\110\044\111\001" +
    "\002\000\024\023\uffef\024\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\044\104\001\002\000\036\007" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\044\uffe9\046" +
    "\uffe9\001\002\000\010\043\uffe2\050\uffe2\051\uffe2\001\002" +
    "\000\010\043\uffe3\050\uffe3\051\uffe3\001\002\000\010\043" +
    "\uffe4\050\uffe4\051\uffe4\001\002\000\010\043\uffe1\050\uffe1" +
    "\051\uffe1\001\002\000\046\007\uffed\017\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\044" +
    "\uffed\046\uffed\001\002\000\010\043\114\050\054\051\053" +
    "\001\002\000\046\007\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\107\040\106\041\105\042\110\044\uffee\046" +
    "\uffee\001\002\000\010\043\114\050\054\051\053\001\002" +
    "\000\014\037\107\040\106\041\105\042\110\044\111\001" +
    "\002\000\026\017\uffd1\021\uffd1\023\uffef\024\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\001\002\000" +
    "\036\017\uffd0\021\uffd0\023\uffec\024\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\001\002\000\004\021\121\001\002\000\022" +
    "\007\ufff6\013\026\014\037\015\041\016\027\020\036\022" +
    "\ufff6\051\031\001\002\000\006\007\uffd4\022\uffd4\001\002" +
    "\000\004\020\124\001\002\000\010\007\uffd8\022\uffd8\046" +
    "\uffd8\001\002\000\022\007\ufff6\013\026\014\037\015\041" +
    "\016\027\020\036\022\ufff6\051\031\001\002\000\006\007" +
    "\ufff8\022\ufff8\001\002\000\004\002\ufff9\001\002\000\016" +
    "\025\055\026\057\027\061\043\060\050\054\051\053\001" +
    "\002\000\030\007\ufff1\022\ufff1\023\066\024\075\031\076" +
    "\032\070\033\073\034\072\035\071\036\074\046\ufff1\001" +
    "\002\000\004\017\133\001\002\000\020\007\ufff6\013\026" +
    "\014\037\015\041\016\027\020\036\051\031\001\002\000" +
    "\004\007\uffd2\001\002\000\030\007\uffcf\022\uffcf\023\uffef" +
    "\024\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\046\uffcf\001\002\000\040\007\uffce\022\uffce\023\uffec" +
    "\024\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\046\uffce\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\004\004\024\001\001\000\004\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\014\001\001" +
    "\000\002\001\001\000\004\006\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\022" +
    "\001\001\000\002\001\001\000\022\007\031\010\032\011" +
    "\037\012\034\013\033\014\042\020\041\021\027\001\001" +
    "\000\002\001\001\000\010\023\064\024\050\025\134\001" +
    "\001\000\012\015\131\023\064\024\050\025\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\117\023\064\024\050\025\115\001\001\000\010\023" +
    "\055\024\050\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\044\001\001\000" +
    "\022\007\045\010\032\011\037\012\034\013\033\014\042" +
    "\020\041\021\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\066\001\001\000\002" +
    "\001\001\000\010\023\064\024\101\025\102\001\001\000" +
    "\002\001\001\000\010\023\064\024\050\025\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\066\001" +
    "\001\000\002\001\001\000\010\023\076\024\050\025\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\112\001\001\000\004\022\111\001\001\000" +
    "\004\024\114\001\001\000\004\022\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\121\010\032\011\037\012\034\013\033\014\042\020\041" +
    "\021\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\125\010\032\011\037\012\034" +
    "\013\033\014\042\020\041\021\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\130\024\050\025\051" +
    "\001\001\000\004\016\066\001\001\000\002\001\001\000" +
    "\022\007\133\010\032\011\037\012\034\013\033\014\042" +
    "\020\041\021\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    private AnalizadorSemantico asemantico= new AnalizadorSemantico();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // leerescribir ::= WRITE expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = asemantico.write((String) exp);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leerescribir",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // leerescribir ::= READ IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = asemantico.read(asemantico.getTipoVar(id)+","+id);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leerescribir",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // leerescribir ::= READ logico 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = asemantico.read((String) log);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leerescribir",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = asemantico.condic(asemantico.getTipoVar(id)+","+id);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= logico 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = asemantico.condic((String) log);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // buclewhile ::= WHILE condicion DO listaSentencias 
            {
              Object RESULT =null;
		int condicleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int condicright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object condic = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = "While "+condic+((String) ls).replace("\n","\n|   ");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("buclewhile",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicionno ::= ELSE listaSentencias 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = "Else"+((String) ls).replace("\n","\n|   ");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionno",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicionsi ::= IF condicion THEN listaSentencias 
            {
              Object RESULT =null;
		int condicleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int condicright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object condic = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = "If "+condic+((String) ls).replace("\n","\n|   ");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionsi",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bucleif ::= condicionsi condicionno 
            {
              Object RESULT =null;
		int csileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int csiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object csi = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cnoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cnoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cno = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = csi+"\n"+cno;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucleif",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bucleif ::= condicionsi 
            {
              Object RESULT =null;
		int csileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int csiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object csi = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = csi;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucleif",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bucles ::= buclewhile END WHILE 
            {
              Object RESULT =null;
		int mientleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mientright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object mient = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		RESULT = mient +"\n|   |   | End While ";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucles",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bucles ::= bucleif END IF 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		RESULT = si + "\n|   |   | End If";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucles",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicional ::= OR 
            {
              Object RESULT =null;
		RESULT = "Or";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicional ::= AND 
            {
              Object RESULT =null;
		RESULT = "And";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicional ::= DISTINTO 
            {
              Object RESULT =null;
		RESULT = "Distinto";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = "Menor_Igual";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = "Mayor_Igual";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT = "Igual";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicional ::= MENOR 
            {
              Object RESULT =null;
		RESULT = "Menor";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT = "Mayor";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= DIVISION 
            {
              Object RESULT =null;
		RESULT = "Div";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT = "Mult";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "Resta";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= SUMA 
            {
              Object RESULT =null;
		RESULT = "Suma";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logico ::= FALSE 
            {
              Object RESULT =null;
		
                        //RESULT = "False";
                        RESULT = "Boolean,False";
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logico",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logico ::= TRUE 
            {
              Object RESULT =null;
		
                        //RESULT = "True";
                        RESULT = "Boolean,True";
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logico",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logico ::= NOT PARENTESIS_ABIERTO IDE PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        RESULT = asemantico.getTipoVar(id);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logico",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logico ::= NOT PARENTESIS_ABIERTO logico PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        //RESULT = "NotBoolean("+log+")";
                        RESULT = log;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logico",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logico ::= PARENTESIS_ABIERTO logico PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        //RESULT = "("+log+")";
                        RESULT = log;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logico",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logico ::= expresion condicional expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = cl+", "+exp1+", "+exp2;
                        RESULT = asemantico.exp((String)cl, (String)exp1, (String)exp2);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logico",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetico ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = "num("+e.intValue()+")";
                        RESULT = "Integer,num("+e.intValue()+")";
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("aritmetico",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmetico ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = id;
                        RESULT = asemantico.getTipoVar(id);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("aritmetico",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aritmetico ::= PARENTESIS_ABIERTO aritmetico PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int artright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object art = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        //RESULT = "("+art+")";
                        RESULT = art;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("aritmetico",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aritmetico ::= aritmetico operacion aritmetico 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = op+", "+exp1+", "+exp2;
                        RESULT = asemantico.exp((String)op, (String)exp1, (String)exp2);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("aritmetico",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= logico 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = "expLogica("+log+")";
                        RESULT = log;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= aritmetico 
            {
              Object RESULT =null;
		int aritleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aritright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object arit = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = "expArit("+arit+")";
                        RESULT = arit;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignarvalor ::= IDE ASIGNACION expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        //RESULT = "Asign ("+id+","+exp+")";
                        RESULT = asemantico.asign((String)id, (String)exp); 
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignarvalor",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= SKIP 
            {
              Object RESULT =null;
		RESULT = "Skip";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= leerescribir 
            {
              Object RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = wr;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= bucles 
            {
              Object RESULT =null;
		int bclleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bclright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bcl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = bcl;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= asignarvalor 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = asig;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaSentencias ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaSentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaSentencias ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = "\n|   |   | "+s;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaSentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaSentencias ::= sentencia PUNTO_COMA listaSentencias 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = "\n|   |   | "+s+ls;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaSentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // principal ::= BEGIN listaSentencias END 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = "|   | Begin"+ls+"\n|   | End";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("principal",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipodato ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "Boolean";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodato",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipodato ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "Integer";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodato",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nombrescampos ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = id;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("nombrescampos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nombrescampos ::= IDE COMA nombrescampos 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ncsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ncsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ncs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = id+","+ ncs;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("nombrescampos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= VAR nombrescampos DOS_PUNTOS tipodato PUNTO_COMA declaraciones 
            {
              Object RESULT =null;
		int ncsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ncsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ncs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = "|   | Var ("+td+"["+ncs+"]"+")\n" + decl;
                    String[] vars = ((String) ncs).split(",");
                    asemantico.insertarVariables(((String) td), vars);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cabecera ::= PROGRAM IDE IS declaraciones principal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = "| Program "+id+" is\n" +decl+ p; 
                String[] vars = ((String) id).split(",");
                asemantico.insertarVariables("pseudo", vars); 
				
				asemantico.imprimirErroresSemanticos();
                System.out.println("Analisis Sintactico completado: \n" + "------------------------------- \n\n"+RESULT);
                
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cabecera",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cabecera EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

